============================= test session starts ==============================
platform linux -- Python 3.12.3, pytest-8.3.4, pluggy-1.5.0 -- /home/lenny/partitionfinder/.venv/bin/python
cachedir: .pytest_cache
rootdir: /home/lenny/partitionfinder
configfile: pyproject.toml
plugins: anyio-4.8.0
collecting ... collected 134 items

tests/PF2/test_pf2.py::test_missing_sites_warning FAILED                 [  0%]
tests/PF2/test_pf2.py::test_overlapping_blocks PASSED                    [  1%]
tests/all_succeed/test_all_success.py::test_1subset FAILED               [  2%]
tests/cfg/test_configs.py::test_DNA_success[test01.cfg] PASSED           [  2%]
tests/cfg/test_configs.py::test_DNA_success[test02.cfg] PASSED           [  3%]
tests/cfg/test_configs.py::test_DNA_success[test03.cfg] PASSED           [  4%]
tests/cfg/test_configs.py::test_DNA_success[test04.cfg] PASSED           [  5%]
tests/cfg/test_configs.py::test_DNA_success[test05.cfg] PASSED           [  5%]
tests/cfg/test_configs.py::test_DNA_success[test06.cfg] PASSED           [  6%]
tests/cfg/test_configs.py::test_DNA_success[test07.cfg] PASSED           [  7%]
tests/cfg/test_configs.py::test_DNA_success[test08.cfg] PASSED           [  8%]
tests/cfg/test_configs.py::test_DNA_success[test09.cfg] PASSED           [  8%]
tests/cfg/test_configs.py::test_DNA_success[test10.cfg] PASSED           [  9%]
tests/cfg/test_configs.py::test_DNA_success[test11.cfg] PASSED           [ 10%]
tests/cfg/test_configs.py::test_DNA_failure[test14.cfg] PASSED           [ 11%]
tests/cfg/test_configs.py::test_protein_success[test13.cfg] PASSED       [ 11%]
tests/cfg/test_configs.py::test_protein_failure[test12.cfg] PASSED       [ 12%]
tests/cfg/test_configs.py::test_protein_failure[test15.cfg] PASSED       [ 13%]
tests/cfg/test_configs.py::test_protein_failure[test16.cfg] PASSED       [ 14%]
tests/christof/test_christof.py::test_greedy_phyml_dna FAILED            [ 14%]
tests/christof/test_christof.py::test_greedy_raxml_dna FAILED            [ 15%]
tests/christof/test_christof.py::test_greedy_phyml_protein FAILED        [ 16%]
tests/christof/test_christof.py::test_greedy_raxml_protein FAILED        [ 17%]
tests/christof/test_christof.py::test_clustering_raxml_dna FAILED        [ 17%]
tests/christof/test_christof.py::test_alignment_error PASSED             [ 18%]
tests/christof/test_christof.py::test_overlap_error PASSED               [ 19%]
tests/christof/test_christof.py::test_clustering_phyml_dna PASSED        [ 20%]
tests/clustering/test_clustering.py::test_clustering[DNA_hcluster1] FAILED [ 20%]
tests/clustering/test_clustering.py::test_clustering[DNA_hcluster2] FAILED [ 21%]
tests/clustering/test_clustering.py::test_clustering[DNA_hcluster3] FAILED [ 22%]
tests/clustering/test_clustering.py::test_clustering[DNA_hcluster4] FAILED [ 23%]
tests/clustering/test_clustering.py::test_clustering[DNA_hcluster5] FAILED [ 23%]
tests/clustering/test_clustering.py::test_clustering[DNA_hcluster6] FAILED [ 24%]
tests/clustering/test_clustering.py::test_clustering[DNA_hcluster7] FAILED [ 25%]
tests/clustering/test_clustering.py::test_clustering[DNA_rcluster1] FAILED [ 26%]
tests/clustering/test_clustering.py::test_clustering[DNA_rcluster10] FAILED [ 26%]
tests/clustering/test_clustering.py::test_clustering[DNA_rcluster11] FAILED [ 27%]
tests/clustering/test_clustering.py::test_clustering[DNA_rcluster12] FAILED [ 28%]
tests/clustering/test_clustering.py::test_clustering[DNA_rcluster13] FAILED [ 29%]
tests/clustering/test_clustering.py::test_clustering[DNA_rcluster14] FAILED [ 29%]
tests/clustering/test_clustering.py::test_clustering[DNA_rcluster2] FAILED [ 30%]
tests/clustering/test_clustering.py::test_clustering[DNA_rcluster3] FAILED [ 31%]
tests/clustering/test_clustering.py::test_clustering[DNA_rcluster4] FAILED [ 32%]
tests/clustering/test_clustering.py::test_clustering[DNA_rcluster5] FAILED [ 32%]
tests/clustering/test_clustering.py::test_clustering[DNA_rcluster6] FAILED [ 33%]
tests/clustering/test_clustering.py::test_clustering[DNA_rcluster7] FAILED [ 34%]
tests/clustering/test_clustering.py::test_clustering[DNA_rcluster8] FAILED [ 35%]
tests/clustering/test_clustering.py::test_clustering[DNA_rcluster9] FAILED [ 35%]
tests/clustering/test_clustering.py::test_clustering[prot_hcluster1] FAILED [ 36%]
tests/clustering/test_clustering.py::test_clustering[prot_hcluster2] FAILED [ 37%]
tests/clustering/test_clustering.py::test_clustering[prot_hcluster3] FAILED [ 38%]
tests/clustering/test_clustering.py::test_clustering[prot_rcluster1] FAILED [ 38%]
tests/clustering/test_clustering.py::test_clustering[prot_rcluster2] FAILED [ 39%]
tests/clustering/test_clustering.py::test_clustering[prot_rcluster3] FAILED [ 40%]
tests/clustering/test_clustering.py::test_clustering[prot_rcluster4] FAILED [ 41%]
tests/clustering/test_clustering.py::test_clustering[prot_rcluster5] FAILED [ 41%]
tests/full_analysis/test_full.py::test_dna[DNA1] FAILED                  [ 42%]
tests/full_analysis/test_full.py::test_dna[DNA2] FAILED                  [ 43%]
tests/full_analysis/test_full.py::test_dna[DNA3] FAILED                  [ 44%]
tests/full_analysis/test_full.py::test_dna[DNA4] FAILED                  [ 44%]
tests/full_analysis/test_full.py::test_dna[DNA5] FAILED                  [ 45%]
tests/full_analysis/test_full.py::test_dna[DNA6] FAILED                  [ 46%]
tests/full_analysis/test_full.py::test_dna[DNA7] FAILED                  [ 47%]
tests/full_analysis/test_full.py::test_dna[DNA8] FAILED                  [ 47%]
tests/full_analysis/test_full.py::test_prot[prot1] FAILED                [ 48%]
tests/full_analysis/test_full.py::test_prot[prot2] FAILED                [ 49%]
tests/full_analysis/test_full.py::test_prot[prot3] FAILED                [ 50%]
tests/full_analysis/test_full.py::test_prot[prot4] FAILED                [ 50%]
tests/full_analysis/test_full.py::test_prot[prot5] FAILED                [ 51%]
tests/full_analysis/test_full.py::test_prot[prot6] FAILED                [ 52%]
tests/full_analysis/test_full.py::test_prot[prot7] FAILED                [ 52%]
tests/full_analysis/test_full.py::test_prot[prot8] FAILED                [ 53%]
tests/full_analysis/test_full.py::test_rerun_success[rerun01] FAILED     [ 54%]
tests/full_analysis/test_full.py::test_rerun_success[rerun02] FAILED     [ 55%]
tests/full_analysis/test_full.py::test_rerun_success[rerun03] FAILED     [ 55%]
tests/full_analysis/test_full.py::test_rerun_success[rerun04] FAILED     [ 56%]
tests/full_analysis/test_full.py::test_rerun_success[rerun05] FAILED     [ 57%]
tests/full_analysis/test_full.py::test_rerun_success[rerun06] FAILED     [ 58%]
tests/full_analysis/test_full.py::test_rerun_success[rerun07] FAILED     [ 58%]
tests/full_analysis/test_full.py::test_rerun_success[rerun08] FAILED     [ 59%]
tests/full_analysis/test_full.py::test_rerun_pf_error[rerun09] PASSED    [ 60%]
tests/full_analysis/test_full.py::test_rerun_pf_error[rerun10] PASSED    [ 61%]
tests/full_analysis/test_full.py::test_rerun_pf_error[rerun11] PASSED    [ 61%]
tests/full_analysis/test_full.py::test_rerun_pf_error[rerun12] PASSED    [ 62%]
tests/full_analysis/test_full.py::test_rerun_pf_error[rerun13] PASSED    [ 63%]
tests/full_analysis/test_full.py::test_rerun_pf_error[rerun20] PASSED    [ 64%]
tests/full_analysis/test_full.py::test_rerun_pf_error[rerun21] PASSED    [ 64%]
tests/full_analysis/test_full.py::test_rerun_analysis_error[rerun14] PASSED [ 65%]
tests/full_analysis/test_full.py::test_rerun_analysis_error[rerun15] PASSED [ 66%]
tests/kmeans/test_kmeans.py::test_grand FAILED                           [ 67%]
tests/kmeans_ml_tree/test_ml_tree.py::test_DNA_entropy FAILED            [ 67%]
tests/kmeans_ml_tree/test_ml_tree.py::test_DNA_tiger FAILED              [ 68%]
tests/kmeans_ml_tree/test_ml_tree.py::test_morph_entropy FAILED          [ 69%]
tests/kmeans_ml_tree/test_ml_tree.py::test_morph_tiger FAILED            [ 70%]
tests/morphology/test_AIC.py::test_aic FAILED                            [ 70%]
tests/morphology/test_aicc.py::test_aicc FAILED                          [ 71%]
tests/morphology/test_bic.py::test_bic FAILED                            [ 72%]
tests/morphology/test_incorrectmat.py::test_incmat FAILED                [ 73%]
tests/morphology/test_mat.py::test_mat PASSED                            [ 73%]
tests/morphology/test_modelBin.py::test_bin FAILED                       [ 74%]
tests/morphology/test_modelBinASC.py::test_binASC FAILED                 [ 75%]
tests/morphology/test_modelBinMisSpec.py::test_bin FAILED                [ 76%]
tests/morphology/test_modelMulti.py::test_multi FAILED                   [ 76%]
tests/morphology/test_modelMultiASC.py::test_multiASC FAILED             [ 77%]
tests/morphology/test_modeloutput.py::test_model FAILED                  [ 78%]
tests/morphology/test_nsubs.py::test_nsets FAILED                        [ 79%]
tests/morphology/test_wrongmodel.py::test_mixed FAILED                   [ 79%]
tests/morphology/tiger/test_parse_to_rates.py::test_set_parts FAILED     [ 80%]
tests/morphology/tiger/test_parse_to_rates.py::test_axpi PASSED          [ 81%]
tests/morphology/tiger/test_parse_to_rates.py::test_rates PASSED         [ 82%]
tests/morphology/tiger/test_rate_calc.py::test_rates PASSED              [ 82%]
tests/quick_analysis/test_quick.py::test_quick_analysis[all] FAILED      [ 83%]
tests/quick_analysis/test_quick.py::test_quick_analysis[user_tree] FAILED [ 84%]
tests/quick_analysis/test_quick.py::test_quick_analysis[aln_interleaved] FAILED [ 85%]
tests/quick_analysis/test_quick.py::test_quick_analysis[maclinebreaks] FAILED [ 85%]
tests/quick_analysis/test_quick.py::test_quick_analysis[windowslinebreaks] FAILED [ 86%]
tests/quick_analysis/test_quick.py::test_quick_analysis[aln_RY] FAILED   [ 87%]
tests/quick_analysis/test_quick.py::test_quick_analysis[greedy] FAILED   [ 88%]
tests/quick_analysis/test_quick.py::test_quick_analysis[user] FAILED     [ 88%]
tests/test_alignment.py::test_simple PASSED                              [ 89%]
tests/test_alignment.py::test_interleaved PASSED                         [ 90%]
tests/test_alignment.py::test_too_few_species PASSED                     [ 91%]
tests/test_alignment.py::test_too_many_species PASSED                    [ 91%]
tests/test_alignment.py::test_subset PASSED                              [ 92%]
tests/test_alignment.py::test_load_and_save_phy[/home/lenny/partitionfinder/tests/misc/Caterino_2001.phy] PASSED [ 93%]
tests/test_alignment.py::test_load_and_save_phy[/home/lenny/partitionfinder/tests/misc/interleave.phy] PASSED [ 94%]
tests/test_parser.py::test_one PASSED                                    [ 94%]
tests/test_raxml.py::test_parse_nucleotide FAILED                        [ 95%]
tests/test_raxml.py::test_parse_aminoacid FAILED                         [ 96%]
tests/test_raxml.py::test_parse_lg4m FAILED                              [ 97%]
tests/test_submodels.py::test_consistency PASSED                         [ 97%]
tests/test_submodels.py::test_scheme_lengths PASSED                      [ 98%]
tests/test_subset.py::test_identity PASSED                               [ 99%]
tests/test_subset.py::test_overlap PASSED                                [100%]

=================================== FAILURES ===================================
__________________________ test_missing_sites_warning __________________________

self = <partfinder.phyml.Parser object at 0x7f1a2ff04b00>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

caplog = <_pytest.logging.LogCaptureFixture object at 0x7f1a3039bbc0>

    def test_missing_sites_warning(caplog):
>       main.call_main("protein", '--no-ml-tree "%s"' % path_from_function())

tests/PF2/test_pf2.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
partfinder/main.py:388: in main
    run_analysis(cfg, options)
partfinder/main.py:322: in run_analysis
    results = anal.analyse()
partfinder/analysis.py:93: in analyse
    self.do_analysis()
partfinder/logtools.py:159: in indented_fn
    fn(*args, **kwargs)
partfinder/analysis_method.py:161: in do_analysis
    start_result = self.analyse_scheme(start_scheme)
partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
partfinder/analysis.py:265: in run_threaded
    pool.join()
partfinder/threadpool.py:105: in join
    raise self.exception
partfinder/threadpool.py:120: in run
    cmd(*args)
partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
partfinder/phyml.py:208: in parse
    log.error(str(p))
.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fd65d90>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  subset_ops:logtools.py:100 These columns are missing from the block definitions: 1, 2, 3, 941, 942, 943, 944, 945, 946, 947, 948, 949
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
_________________________________ test_1subset _________________________________

    def test_1subset():
        full_path = os.path.join(HERE, "1subset")
>       main.call_main("DNA", '--raxml --no-ml-tree "%s"' % full_path)

/home/lenny/partitionfinder/tests/all_succeed/test_all_success.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a307021b0>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
____________________________ test_greedy_phyml_dna _____________________________

self = <partfinder.phyml.Parser object at 0x7f1a30405490>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

    def test_greedy_phyml_dna():
>       main.call_main("DNA", '--no-ml-tree "%s"' % path_from_function())

/home/lenny/partitionfinder/tests/christof/test_christof.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/logtools.py:159: in indented_fn
    fn(*args, **kwargs)
/home/lenny/partitionfinder/partfinder/analysis_method.py:161: in do_analysis
    start_result = self.analyse_scheme(start_scheme)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fd676e0>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  subset_ops:logtools.py:100 These columns are missing from the block definitions: 792, 795, 798, 801, 804, 807, 810, 813, 816, 819, 822, 825, 828, 831, 834, 837, 840, 843, 846, 849, 852, 855, 858, 861, 864, 867, 870, 873, 876, 879, 882, 885, 888, 891, 894, 897, 900, 903, 906, 909, 912, 915, 918, 921, 924, 927, 930, 933, 936, 939, 942, 945, 948, 951, 954, 957, 960, 963, 966, 969, 972, 975, 978, 981, 984, 987, 990, 993, 996, 999, 1002, 1005, 1008, 1011, 1014, 1017, 1020, 1023, 1026, 1029, 1032, 1035, 1038, 1041, 1044, 1047, 1050, 1053, 1056, 1059, 1062, 1065, 1068, 1071, 1074, 1077, 1080, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1107, 1110, 1113, 1116, 1119, 1122, 1125, 1128, 1131, 1134, 1137, 1140, 1143, 1146, 1149, 1152, 1155, 1158, 1161, 1164, 1167, 1170, 1173, 1176, 1179, 1182, 1185, 1188, 1191, 1194, 1197, 1200, 1203, 1206, 1209, 1212, 1215, 1218, 1221, 1224, 1227, 1230, 1233, 1236, 1239, 1242, 1245, 1248, 1251, 1254, 1257, 1260, 1263, 1266, 1269, 1272, 1275, 1278, 1281, 1284, 1287, 1290, 1293, 1296, 1299, 1302, 1305, 1308, 1311, 1314, 1317, 1320, 1323, 1326, 1329, 1332, 1335, 1338, 1341, 1344, 1347, 1350, 1353, 1356, 1359, 1362, 1365, 1368, 1371, 1374, 1377, 1380, 1383, 1386, 1389, 1392, 1395, 1398, 1401, 1404, 1407, 1410, 1413, 1416, 1419, 1422, 1425, 1428, 1431, 1434, 1437, 1440, 1443, 1446, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
____________________________ test_greedy_raxml_dna _____________________________

    def test_greedy_raxml_dna():
>       main.call_main("DNA", '--no-ml-tree "%s" --raxml' % path_from_function())

/home/lenny/partitionfinder/tests/christof/test_christof.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a30405430>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
__________________________ test_greedy_phyml_protein ___________________________

self = <partfinder.phyml.Parser object at 0x7f1a2fdd9340>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

    def test_greedy_phyml_protein():
>       main.call_main("protein", '--no-ml-tree "%s"' % path_from_function())

/home/lenny/partitionfinder/tests/christof/test_christof.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/logtools.py:159: in indented_fn
    fn(*args, **kwargs)
/home/lenny/partitionfinder/partfinder/analysis_method.py:161: in do_analysis
    start_result = self.analyse_scheme(start_scheme)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fafc200>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
__________________________ test_greedy_raxml_protein ___________________________

    def test_greedy_raxml_protein():
>       main.call_main("protein", '--no-ml-tree "%s" --raxml' % path_from_function())

/home/lenny/partitionfinder/tests/christof/test_christof.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fd92f90>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
__________________________ test_clustering_raxml_dna ___________________________

    def test_clustering_raxml_dna():
>       main.call_main("DNA", '--no-ml-tree "%s" --raxml' % path_from_function())

/home/lenny/partitionfinder/tests/christof/test_christof.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2ff05f10>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
________________________ test_clustering[DNA_hcluster1] ________________________

folder_name = 'DNA_hcluster1'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
>           main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fb1ed50>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
________________________ test_clustering[DNA_hcluster2] ________________________

folder_name = 'DNA_hcluster2'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
>           main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fddbc50>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
________________________ test_clustering[DNA_hcluster3] ________________________

folder_name = 'DNA_hcluster3'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
            main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))
        elif type(error) == type((0, 0)):
            pytest.xfail(error[1])
        else:
            with pytest.raises(error):
>               main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fdd9bb0>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
________________________ test_clustering[DNA_hcluster4] ________________________

folder_name = 'DNA_hcluster4'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
>           main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fddb770>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
________________________ test_clustering[DNA_hcluster5] ________________________

folder_name = 'DNA_hcluster5'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
            main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))
        elif type(error) == type((0, 0)):
            pytest.xfail(error[1])
        else:
            with pytest.raises(error):
>               main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fdd97c0>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
________________________ test_clustering[DNA_hcluster6] ________________________

folder_name = 'DNA_hcluster6'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
>           main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fddbc50>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
________________________ test_clustering[DNA_hcluster7] ________________________

folder_name = 'DNA_hcluster7'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
            main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))
        elif type(error) == type((0, 0)):
            pytest.xfail(error[1])
        else:
            with pytest.raises(error):
>               main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fb1c5f0>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
________________________ test_clustering[DNA_rcluster1] ________________________

folder_name = 'DNA_rcluster1'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
>           main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fb1ff80>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
_______________________ test_clustering[DNA_rcluster10] ________________________

folder_name = 'DNA_rcluster10'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
>           main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fb1d760>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
_______________________ test_clustering[DNA_rcluster11] ________________________

folder_name = 'DNA_rcluster11'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
>           main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fb1c9e0>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
_______________________ test_clustering[DNA_rcluster12] ________________________

folder_name = 'DNA_rcluster12'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
            main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))
        elif type(error) == type((0, 0)):
            pytest.xfail(error[1])
        else:
            with pytest.raises(error):
>               main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fb1f710>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
_______________________ test_clustering[DNA_rcluster13] ________________________

folder_name = 'DNA_rcluster13'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
            main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))
        elif type(error) == type((0, 0)):
            pytest.xfail(error[1])
        else:
            with pytest.raises(error):
>               main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fb1ea50>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
_______________________ test_clustering[DNA_rcluster14] ________________________

folder_name = 'DNA_rcluster14'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
>           main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fb1e750>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
________________________ test_clustering[DNA_rcluster2] ________________________

folder_name = 'DNA_rcluster2'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
>           main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fb1ef30>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
________________________ test_clustering[DNA_rcluster3] ________________________

folder_name = 'DNA_rcluster3'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
>           main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fa7aae0>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
________________________ test_clustering[DNA_rcluster4] ________________________

folder_name = 'DNA_rcluster4'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
>           main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fa7adb0>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
________________________ test_clustering[DNA_rcluster5] ________________________

folder_name = 'DNA_rcluster5'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
            main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))
        elif type(error) == type((0, 0)):
            pytest.xfail(error[1])
        else:
            with pytest.raises(error):
>               main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fa78b00>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
________________________ test_clustering[DNA_rcluster6] ________________________

folder_name = 'DNA_rcluster6'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
>           main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fae30e0>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
________________________ test_clustering[DNA_rcluster7] ________________________

folder_name = 'DNA_rcluster7'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
            main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))
        elif type(error) == type((0, 0)):
            pytest.xfail(error[1])
        else:
            with pytest.raises(error):
>               main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fad5790>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
________________________ test_clustering[DNA_rcluster8] ________________________

folder_name = 'DNA_rcluster8'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
>           main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fa78c80>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
________________________ test_clustering[DNA_rcluster9] ________________________

folder_name = 'DNA_rcluster9'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
>           main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fa7ab10>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
_______________________ test_clustering[prot_hcluster1] ________________________

folder_name = 'prot_hcluster1'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
>           main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fe8e540>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
_______________________ test_clustering[prot_hcluster2] ________________________

folder_name = 'prot_hcluster2'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
>           main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a31b5bef0>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
_______________________ test_clustering[prot_hcluster3] ________________________

folder_name = 'prot_hcluster3'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
>           main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fb1f410>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
_______________________ test_clustering[prot_rcluster1] ________________________

folder_name = 'prot_rcluster1'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
            main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))
        elif type(error) == type((0, 0)):
            pytest.xfail(error[1])
        else:
            with pytest.raises(error):
>               main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fb1f5f0>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
_______________________ test_clustering[prot_rcluster2] ________________________

folder_name = 'prot_rcluster2'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
>           main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fdbd190>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
_______________________ test_clustering[prot_rcluster3] ________________________

folder_name = 'prot_rcluster3'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
            main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))
        elif type(error) == type((0, 0)):
            pytest.xfail(error[1])
        else:
            with pytest.raises(error):
>               main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fdbcb00>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
_______________________ test_clustering[prot_rcluster4] ________________________

folder_name = 'prot_rcluster4'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
            main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))
        elif type(error) == type((0, 0)):
            pytest.xfail(error[1])
        else:
            with pytest.raises(error):
>               main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fdbf2f0>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
_______________________ test_clustering[prot_rcluster5] ________________________

folder_name = 'prot_rcluster5'

    def test_clustering(folder_name):
        full_path = os.path.join(HERE, folder_name)
        error, kind, cmdline = test_container[folder_name]
        if error is None:
>           main.call_main(kind, '--no-ml-tree "%s" --raxml %s' % (full_path, cmdline))

/home/lenny/partitionfinder/tests/clustering/test_clustering.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fe022a0>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
________________________________ test_dna[DNA1] ________________________________

self = <partfinder.phyml.Parser object at 0x7f1a2fdbb3e0>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

dna = 'DNA1'

    def test_dna(dna):
        full_path = os.path.join(HERE, dna)
>       main.call_main("DNA", '--no-ml-tree --compare "%s"' % full_path)

/home/lenny/partitionfinder/tests/full_analysis/test_full.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/analysis_method.py:135: in do_analysis
    res = self.analyse_scheme(s)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fafdd00>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  subset_ops:logtools.py:100 These columns are missing from the block definitions
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
________________________________ test_dna[DNA2] ________________________________

self = <partfinder.phyml.Parser object at 0x7f1a2fae86e0>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

dna = 'DNA2'

    def test_dna(dna):
        full_path = os.path.join(HERE, dna)
>       main.call_main("DNA", '--no-ml-tree --compare "%s"' % full_path)

/home/lenny/partitionfinder/tests/full_analysis/test_full.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/analysis_method.py:135: in do_analysis
    res = self.analyse_scheme(s)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fafd760>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  subset_ops:logtools.py:100 These columns are missing from the block definitions
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
________________________________ test_dna[DNA3] ________________________________

self = <partfinder.phyml.Parser object at 0x7f1a2fe01be0>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

dna = 'DNA3'

    def test_dna(dna):
        full_path = os.path.join(HERE, dna)
>       main.call_main("DNA", '--no-ml-tree --compare "%s"' % full_path)

/home/lenny/partitionfinder/tests/full_analysis/test_full.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/analysis_method.py:135: in do_analysis
    res = self.analyse_scheme(s)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fafee70>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  subset_ops:logtools.py:100 These columns are missing from the block definitions
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
________________________________ test_dna[DNA4] ________________________________

self = <partfinder.phyml.Parser object at 0x7f1a2fb09b80>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

dna = 'DNA4'

    def test_dna(dna):
        full_path = os.path.join(HERE, dna)
>       main.call_main("DNA", '--no-ml-tree --compare "%s"' % full_path)

/home/lenny/partitionfinder/tests/full_analysis/test_full.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/analysis_method.py:135: in do_analysis
    res = self.analyse_scheme(s)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2faff4a0>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  subset_ops:logtools.py:100 These columns are missing from the block definitions
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
________________________________ test_dna[DNA5] ________________________________

self = <partfinder.phyml.Parser object at 0x7f1a2fb1c650>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

dna = 'DNA5'

    def test_dna(dna):
        full_path = os.path.join(HERE, dna)
>       main.call_main("DNA", '--no-ml-tree --compare "%s"' % full_path)

/home/lenny/partitionfinder/tests/full_analysis/test_full.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/analysis_method.py:47: in do_analysis
    res = self.analyse_scheme(s)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fa94050>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  subset_ops:logtools.py:100 These columns are missing from the block definitions
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
________________________________ test_dna[DNA6] ________________________________

self = <partfinder.phyml.Parser object at 0x7f1a2fb1a390>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

dna = 'DNA6'

    def test_dna(dna):
        full_path = os.path.join(HERE, dna)
>       main.call_main("DNA", '--no-ml-tree --compare "%s"' % full_path)

/home/lenny/partitionfinder/tests/full_analysis/test_full.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/logtools.py:159: in indented_fn
    fn(*args, **kwargs)
/home/lenny/partitionfinder/partfinder/analysis_method.py:161: in do_analysis
    start_result = self.analyse_scheme(start_scheme)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fa947a0>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  subset_ops:logtools.py:100 These columns are missing from the block definitions: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242, 2243, 2244, 2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308, 2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317, 2318, 2319, 2320, 2321, 2322, 2323, 2324, 2325, 2326, 2327, 2328, 2329, 2330, 2331, 2332, 2333, 2334, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 2815, 2816, 2817, 2818, 2819, 2820, 2821, 2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840, 2841, 2842, 2843, 2844, 2845, 2846, 2847, 2848, 2849, 2850, 2851, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870, 2871, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2880, 2881, 2882, 2883, 2884, 2885, 2886, 2887, 2888, 2889, 2890, 2891, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2899, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920, 2921, 2922, 2923, 2924, 2925, 2926, 2927, 2928, 2929, 2930, 2931, 2932, 2933, 2934, 2935, 2936, 2937, 2938, 2939, 2940, 2941, 2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949, 2950, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 2981, 2982, 2983, 2984, 2985, 2986, 2987, 2988, 2989, 2990, 2991, 2992, 2993, 2994, 2995, 2996, 2997, 2998, 2999, 3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255, 3256, 3257, 3258, 3259, 3260, 3261, 3262, 3263, 3264, 3265, 3266, 3267, 3268, 3269, 3270, 3271, 3272, 3273, 3274, 3275, 3276, 3277, 3278, 3279, 3280, 3281, 3282, 3283, 3284, 3285, 3286, 3287, 3288, 3289, 3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297, 3298, 3299, 3300, 3301, 3302, 3303, 3304, 3305, 3306, 3307, 3308, 3309, 3310, 3311, 3312, 3313, 3314, 3315, 3316, 3317, 3318, 3319, 3320, 3321, 3322, 3323, 3324, 3325, 3326, 3327, 3328, 3329
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
________________________________ test_dna[DNA7] ________________________________

self = <partfinder.phyml.Parser object at 0x7f1a2f55e630>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

dna = 'DNA7'

    def test_dna(dna):
        full_path = os.path.join(HERE, dna)
>       main.call_main("DNA", '--no-ml-tree --compare "%s"' % full_path)

/home/lenny/partitionfinder/tests/full_analysis/test_full.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/analysis_method.py:135: in do_analysis
    res = self.analyse_scheme(s)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fa95400>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  subset_ops:logtools.py:100 These columns are missing from the block definitions
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
________________________________ test_dna[DNA8] ________________________________

self = <partfinder.phyml.Parser object at 0x7f1a2fd6a000>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

dna = 'DNA8'

    def test_dna(dna):
        full_path = os.path.join(HERE, dna)
>       main.call_main("DNA", '--no-ml-tree --compare "%s"' % full_path)

/home/lenny/partitionfinder/tests/full_analysis/test_full.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/logtools.py:159: in indented_fn
    fn(*args, **kwargs)
/home/lenny/partitionfinder/partfinder/analysis_method.py:161: in do_analysis
    start_result = self.analyse_scheme(start_scheme)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fafe720>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  subset_ops:logtools.py:100 These columns are missing from the block definitions
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
_______________________________ test_prot[prot1] _______________________________

self = <partfinder.phyml.Parser object at 0x7f1a2fd3ec60>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

prot = 'prot1'

    def test_prot(prot):
        full_path = os.path.join(HERE, prot)
>       main.call_main("protein", '--no-ml-tree --compare "%s"' % full_path)

/home/lenny/partitionfinder/tests/full_analysis/test_full.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/analysis_method.py:135: in do_analysis
    res = self.analyse_scheme(s)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fafd9a0>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  subset_ops:logtools.py:100 These columns are missing from the block definitions: 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
_______________________________ test_prot[prot2] _______________________________

self = <partfinder.phyml.Parser object at 0x7f1a2fad6780>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

prot = 'prot2'

    def test_prot(prot):
        full_path = os.path.join(HERE, prot)
>       main.call_main("protein", '--no-ml-tree --compare "%s"' % full_path)

/home/lenny/partitionfinder/tests/full_analysis/test_full.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/analysis_method.py:135: in do_analysis
    res = self.analyse_scheme(s)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fa95490>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  subset_ops:logtools.py:100 These columns are missing from the block definitions: 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
_______________________________ test_prot[prot3] _______________________________

self = <partfinder.phyml.Parser object at 0x7f1a2fe2eb10>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

prot = 'prot3'

    def test_prot(prot):
        full_path = os.path.join(HERE, prot)
>       main.call_main("protein", '--no-ml-tree --compare "%s"' % full_path)

/home/lenny/partitionfinder/tests/full_analysis/test_full.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/analysis_method.py:135: in do_analysis
    res = self.analyse_scheme(s)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fa951c0>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  subset_ops:logtools.py:100 These columns are missing from the block definitions: 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
_______________________________ test_prot[prot4] _______________________________

self = <partfinder.phyml.Parser object at 0x7f1a2fdfe660>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

prot = 'prot4'

    def test_prot(prot):
        full_path = os.path.join(HERE, prot)
>       main.call_main("protein", '--no-ml-tree --compare "%s"' % full_path)

/home/lenny/partitionfinder/tests/full_analysis/test_full.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/analysis_method.py:135: in do_analysis
    res = self.analyse_scheme(s)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fa95910>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  subset_ops:logtools.py:100 These columns are missing from the block definitions: 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
_______________________________ test_prot[prot5] _______________________________

self = <partfinder.phyml.Parser object at 0x7f1a2fe00d10>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

prot = 'prot5'

    def test_prot(prot):
        full_path = os.path.join(HERE, prot)
>       main.call_main("protein", '--no-ml-tree --compare "%s"' % full_path)

/home/lenny/partitionfinder/tests/full_analysis/test_full.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/analysis_method.py:47: in do_analysis
    res = self.analyse_scheme(s)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fa959a0>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  subset_ops:logtools.py:100 These columns are missing from the block definitions: 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
_______________________________ test_prot[prot6] _______________________________

self = <partfinder.phyml.Parser object at 0x7f1a2fdfd6a0>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

prot = 'prot6'

    def test_prot(prot):
        full_path = os.path.join(HERE, prot)
>       main.call_main("protein", '--no-ml-tree --compare "%s"' % full_path)

/home/lenny/partitionfinder/tests/full_analysis/test_full.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/logtools.py:159: in indented_fn
    fn(*args, **kwargs)
/home/lenny/partitionfinder/partfinder/analysis_method.py:161: in do_analysis
    start_result = self.analyse_scheme(start_scheme)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fa960f0>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  subset_ops:logtools.py:100 These columns are missing from the block definitions: 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
_______________________________ test_prot[prot7] _______________________________

self = <partfinder.phyml.Parser object at 0x7f1a2fddaae0>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

prot = 'prot7'

    def test_prot(prot):
        full_path = os.path.join(HERE, prot)
>       main.call_main("protein", '--no-ml-tree --compare "%s"' % full_path)

/home/lenny/partitionfinder/tests/full_analysis/test_full.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/analysis_method.py:135: in do_analysis
    res = self.analyse_scheme(s)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fd674a0>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  subset_ops:logtools.py:100 These columns are missing from the block definitions: 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
_______________________________ test_prot[prot8] _______________________________

self = <partfinder.phyml.Parser object at 0x7f1a2fb0f920>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

prot = 'prot8'

    def test_prot(prot):
        full_path = os.path.join(HERE, prot)
>       main.call_main("protein", '--no-ml-tree --compare "%s"' % full_path)

/home/lenny/partitionfinder/tests/full_analysis/test_full.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/logtools.py:159: in indented_fn
    fn(*args, **kwargs)
/home/lenny/partitionfinder/partfinder/analysis_method.py:161: in do_analysis
    start_result = self.analyse_scheme(start_scheme)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fcec560>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  subset_ops:logtools.py:100 These columns are missing from the block definitions: 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
_________________________ test_rerun_success[rerun01] __________________________

self = <partfinder.phyml.Parser object at 0x7f1a2fb09df0>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

rerun_success = 'rerun01'

    def test_rerun_success(rerun_success):
        full_path = os.path.join(HERE, rerun_success)
        load_rerun(full_path)
>       main.call_main("DNA", '--no-ml-tree "%s"' % full_path)

/home/lenny/partitionfinder/tests/full_analysis/test_full.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/analysis_method.py:135: in do_analysis
    res = self.analyse_scheme(s)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fcecb90>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  subset_ops:logtools.py:100 These columns are missing from the block definitions
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
_________________________ test_rerun_success[rerun02] __________________________

self = <partfinder.phyml.Parser object at 0x7f1a2fdbd4f0>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

rerun_success = 'rerun02'

    def test_rerun_success(rerun_success):
        full_path = os.path.join(HERE, rerun_success)
        load_rerun(full_path)
>       main.call_main("DNA", '--no-ml-tree "%s"' % full_path)

/home/lenny/partitionfinder/tests/full_analysis/test_full.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/analysis_method.py:135: in do_analysis
    res = self.analyse_scheme(s)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fcece60>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  subset_ops:logtools.py:100 These columns are missing from the block definitions
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
_________________________ test_rerun_success[rerun03] __________________________

self = <partfinder.phyml.Parser object at 0x7f1a2fdfdf10>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

rerun_success = 'rerun03'

    def test_rerun_success(rerun_success):
        full_path = os.path.join(HERE, rerun_success)
        load_rerun(full_path)
>       main.call_main("DNA", '--no-ml-tree "%s"' % full_path)

/home/lenny/partitionfinder/tests/full_analysis/test_full.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/analysis_method.py:135: in do_analysis
    res = self.analyse_scheme(s)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fced5b0>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  subset_ops:logtools.py:100 These columns are missing from the block definitions
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
_________________________ test_rerun_success[rerun04] __________________________

self = <partfinder.phyml.Parser object at 0x7f1a2fd2f8f0>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

rerun_success = 'rerun04'

    def test_rerun_success(rerun_success):
        full_path = os.path.join(HERE, rerun_success)
        load_rerun(full_path)
>       main.call_main("DNA", '--no-ml-tree "%s"' % full_path)

/home/lenny/partitionfinder/tests/full_analysis/test_full.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/logtools.py:159: in indented_fn
    fn(*args, **kwargs)
/home/lenny/partitionfinder/partfinder/analysis_method.py:161: in do_analysis
    start_result = self.analyse_scheme(start_scheme)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fced9a0>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  subset_ops:logtools.py:100 These columns are missing from the block definitions
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
_________________________ test_rerun_success[rerun05] __________________________

self = <partfinder.phyml.Parser object at 0x7f1a2faea570>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

rerun_success = 'rerun05'

    def test_rerun_success(rerun_success):
        full_path = os.path.join(HERE, rerun_success)
        load_rerun(full_path)
>       main.call_main("DNA", '--no-ml-tree "%s"' % full_path)

/home/lenny/partitionfinder/tests/full_analysis/test_full.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/analysis_method.py:47: in do_analysis
    res = self.analyse_scheme(s)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fcee7b0>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  subset_ops:logtools.py:100 These columns are missing from the block definitions
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
_________________________ test_rerun_success[rerun06] __________________________

self = <partfinder.phyml.Parser object at 0x7f1a2fd03a10>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

rerun_success = 'rerun06'

    def test_rerun_success(rerun_success):
        full_path = os.path.join(HERE, rerun_success)
        load_rerun(full_path)
>       main.call_main("DNA", '--no-ml-tree "%s"' % full_path)

/home/lenny/partitionfinder/tests/full_analysis/test_full.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/analysis_method.py:47: in do_analysis
    res = self.analyse_scheme(s)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fceecc0>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  subset_ops:logtools.py:100 These columns are missing from the block definitions
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
_________________________ test_rerun_success[rerun07] __________________________

self = <partfinder.phyml.Parser object at 0x7f1a2fc24c20>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

rerun_success = 'rerun07'

    def test_rerun_success(rerun_success):
        full_path = os.path.join(HERE, rerun_success)
        load_rerun(full_path)
>       main.call_main("DNA", '--no-ml-tree "%s"' % full_path)

/home/lenny/partitionfinder/tests/full_analysis/test_full.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/analysis_method.py:47: in do_analysis
    res = self.analyse_scheme(s)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fcee960>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  subset_ops:logtools.py:100 These columns are missing from the block definitions
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
_________________________ test_rerun_success[rerun08] __________________________

self = <partfinder.phyml.Parser object at 0x7f1a2fcf15e0>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

rerun_success = 'rerun08'

    def test_rerun_success(rerun_success):
        full_path = os.path.join(HERE, rerun_success)
        load_rerun(full_path)
>       main.call_main("DNA", '--no-ml-tree "%s"' % full_path)

/home/lenny/partitionfinder/tests/full_analysis/test_full.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/analysis_method.py:47: in do_analysis
    res = self.analyse_scheme(s)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2faff6e0>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  subset_ops:logtools.py:100 These columns are missing from the block definitions
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
__________________________________ test_grand __________________________________

    def test_grand():
        full_path = os.path.join(HERE, "Grande_2013")
        with pytest.raises(util.PartitionFinderError):
>           main.call_main("DNA", '--no-ml-tree --raxml "%s"' % full_path)

/home/lenny/partitionfinder/tests/kmeans/test_kmeans.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fa55130>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
_______________________________ test_DNA_entropy _______________________________

    def test_DNA_entropy():
        full_path = os.path.join(HERE, "DNA_entropy")
        with pytest.raises(util.PartitionFinderError):
>           main.call_main("DNA", '--raxml --kmeans entropy --min-subset-size 10 "%s"' % full_path)

/home/lenny/partitionfinder/tests/kmeans_ml_tree/test_ml_tree.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fc268d0>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
________________________________ test_DNA_tiger ________________________________

    def test_DNA_tiger():
        full_path = os.path.join(HERE, "DNA_tiger")
        with pytest.raises(util.PartitionFinderError):
>       	main.call_main("DNA", '--raxml --kmeans tiger --min-subset-size 10 "%s"' % full_path)

/home/lenny/partitionfinder/tests/kmeans_ml_tree/test_ml_tree.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fc27cb0>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
______________________________ test_morph_entropy ______________________________

    def test_morph_entropy():
        full_path = os.path.join(HERE, "morph_entropy")
>       main.call_main("morphology", '--raxml --kmeans entropy --min-subset-size 1 "%s"' % full_path)

/home/lenny/partitionfinder/tests/kmeans_ml_tree/test_ml_tree.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fc27fb0>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
_______________________________ test_morph_tiger _______________________________

    def test_morph_tiger():
        full_path = os.path.join(HERE, "morph_tiger")
>       main.call_main("morphology", '--raxml --kmeans tiger --min-subset-size 1 "%s"' % full_path)

/home/lenny/partitionfinder/tests/kmeans_ml_tree/test_ml_tree.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2ff04da0>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
___________________________________ test_aic ___________________________________

    def test_aic():
    	'''This test should pass'''
    	HERE = os.path.abspath(os.path.dirname(__file__))
    	full_path = os.path.join(HERE, "aictest")
>   	main.call_main("morphology", '--no-ml-tree --min-subset-size 1 --raxml "%s"' % full_path)

/home/lenny/partitionfinder/tests/morphology/test_AIC.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2ff04650>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
__________________________________ test_aicc ___________________________________

    def test_aicc():
    	'''This test should pass'''
    
    	HERE = os.path.abspath(os.path.dirname(__file__))
    	full_path = os.path.join(HERE, "aicctest")
>   	main.call_main("morphology", '--no-ml-tree --min-subset-size 1 --raxml "%s"' % full_path)

/home/lenny/partitionfinder/tests/morphology/test_aicc.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fa544d0>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
___________________________________ test_bic ___________________________________

    def test_bic():
    	'''This test should pass'''
    	HERE = os.path.abspath(os.path.dirname(__file__))
    	full_path = os.path.join(HERE, "bictest")
>   	main.call_main("morphology", '--no-ml-tree --min-subset-size 1 --raxml "%s"' % full_path)

/home/lenny/partitionfinder/tests/morphology/test_bic.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fdbc140>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
_________________________________ test_incmat __________________________________

    def test_incmat():
    	'''This test should fail due to incorrect line length'''
    	HERE = os.path.abspath(os.path.dirname(__file__))
    	full_path = os.path.join(HERE, "incmat")
    	with pytest.raises(util.PartitionFinderError):
>   		main.call_main("morphology", '--no-ml-tree --min-subset-size 1 --raxml "%s"' % full_path)

/home/lenny/partitionfinder/tests/morphology/test_incorrectmat.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fdbd070>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
___________________________________ test_bin ___________________________________

    def test_bin():
    	'''This test should pass'''
    	HERE = os.path.abspath(os.path.dirname(__file__))
    	full_path = os.path.join(HERE, "binary")
>   	main.call_main("morphology", '--no-ml-tree --min-subset-size 1 --raxml "%s"' % full_path)

/home/lenny/partitionfinder/tests/morphology/test_modelBin.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fadaf00>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
_________________________________ test_binASC __________________________________

    def test_binASC():
    	'''This test should pass'''
    	HERE = os.path.abspath(os.path.dirname(__file__))
    	full_path = os.path.join(HERE, "binASC")
>   	main.call_main("morphology", '--no-ml-tree --min-subset-size 1 --raxml "%s"' % full_path)

/home/lenny/partitionfinder/tests/morphology/test_modelBinASC.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fe01e80>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
___________________________________ test_bin ___________________________________

    def test_bin():
    	'''This test should pass'''
    	HERE = os.path.abspath(os.path.dirname(__file__))
    	full_path = os.path.join(HERE, "bin_wrongdata")
>   	main.call_main("morphology", '--no-ml-tree --min-subset-size 1 --raxml "%s"' % full_path)

/home/lenny/partitionfinder/tests/morphology/test_modelBinMisSpec.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fe00c80>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
__________________________________ test_multi __________________________________

    def test_multi():
    	'''This test should pass'''
    	HERE = os.path.abspath(os.path.dirname(__file__))
    	full_path = os.path.join(HERE, "multistate")
>   	main.call_main("morphology", '--no-ml-tree --min-subset-size 1 --raxml "%s"' % full_path)

/home/lenny/partitionfinder/tests/morphology/test_modelMulti.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fe03350>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
________________________________ test_multiASC _________________________________

    def test_multiASC():
    	'''This test should pass'''
    	HERE = os.path.abspath(os.path.dirname(__file__))
    	full_path = os.path.join(HERE, "multiASC")
>   	main.call_main("morphology", '--no-ml-tree --min-subset-size 1 --raxml "%s"' % full_path)

/home/lenny/partitionfinder/tests/morphology/test_modelMultiASC.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fdbd6a0>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
__________________________________ test_model __________________________________

    def test_model():
    	'''This test should pass'''
    	HERE = os.path.abspath(os.path.dirname(__file__))
    	full_path = os.path.join(HERE, "aictest")
>   	main.call_main("morphology", '--no-ml-tree --min-subset-size 1 --raxml "%s"' % full_path)

/home/lenny/partitionfinder/tests/morphology/test_modeloutput.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fd69640>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
__________________________________ test_nsets __________________________________

    def test_nsets():
    	'''This test should pass'''
    	HERE = os.path.abspath(os.path.dirname(__file__))
    	full_path = os.path.join(HERE, "bictest")
>   	main.call_main("morphology", '--no-ml-tree --min-subset-size 1 --raxml "%s"' % full_path)

/home/lenny/partitionfinder/tests/morphology/test_nsubs.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2fad91c0>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
__________________________________ test_mixed __________________________________

    def test_mixed():
    	'''This test should fail, as we've given PFinder a non-morph model'''
    	HERE = os.path.abspath(os.path.dirname(__file__))
    	full_path = os.path.join(HERE, "wrongmodel")
    	with pytest.raises(util.PartitionFinderError):
>   		main.call_main("morphology", '--no-ml-tree --min-subset-size 1 --raxml "%s"' % full_path)

/home/lenny/partitionfinder/tests/morphology/test_wrongmodel.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:360: in main
    config.the_config.init(datatype,
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2f55e6c0>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
________________________________ test_set_parts ________________________________

    def test_set_parts():
        set_parts = morph_tiger.create_set_parts(MORPH_ALIGN)
>       assert set_parts == [[[0, 1, 3, 4]], [[3, 4], [0, 1, 2]], [[0, 1], [2], [3]], [[0, 1, 3, 4], [2]], [[3, 4], [0, 1, 2]], [[0, 1, 2], [3, 4]], [[0, 1], [3, 4]], [[0], [1, 2], [3], [4]], [[0, 1, 2, 3], [4]], [[0], [2, 3, 4]], [[1, 2, 3, 4], [0]], [[1, 3, 4], [0]], [[2, 3, 4], [0, 1]], [[2, 3], [0, 1, 4]], [[0, 1, 2, 3], [4]], [[1, 2, 3, 4], [0]], [[0, 1], [2, 3, 4]], [[2], [3], [0, 1, 4]], [[2], [0, 1, 3, 4]], [[2], [3], [0, 1, 4]], [[0], [3, 4]], [[0, 1, 2], [3, 4]], [[0, 1], [2, 3, 4]], [[0, 1, 2], [3, 4]], [[1], [0, 3, 4]]]
E       AssertionError: assert [[[0, 1, 3, 4... [3, 4]], ...] == [[[0, 1, 3, 4... [3, 4]], ...]
E         
E         At index 1 diff: [[0, 1, 2], [3, 4]] != [[3, 4], [0, 1, 2]]
E         
E         Full diff:
E           [
E               [
E                   [...
E         
E         ...Full output truncated (791 lines hidden), use '-vv' to show

/home/lenny/partitionfinder/tests/morphology/tiger/test_parse_to_rates.py:21: AssertionError
___________________________ test_quick_analysis[all] ___________________________

self = <partfinder.phyml.Parser object at 0x7f1a2fcbf260>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

test_folder = 'all'

    def test_quick_analysis(test_folder):
        full_path = os.path.join(HERE, test_folder)
>       main.call_main("DNA", '--no-ml-tree "%s" --force-restart' % full_path)

/home/lenny/partitionfinder/tests/quick_analysis/test_quick.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/analysis_method.py:135: in do_analysis
    res = self.analyse_scheme(s)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fcee3c0>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  analysis:logtools.py:100 Deleting all previous workings in './analysis'
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
________________________ test_quick_analysis[user_tree] ________________________

self = <partfinder.phyml.Parser object at 0x7f1a2fc25f70>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

test_folder = 'user_tree'

    def test_quick_analysis(test_folder):
        full_path = os.path.join(HERE, test_folder)
>       main.call_main("DNA", '--no-ml-tree "%s" --force-restart' % full_path)

/home/lenny/partitionfinder/tests/quick_analysis/test_quick.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/analysis_method.py:135: in do_analysis
    res = self.analyse_scheme(s)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fcedc70>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  analysis:logtools.py:100 Deleting all previous workings in './analysis'
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
_____________________ test_quick_analysis[aln_interleaved] _____________________

self = <partfinder.phyml.Parser object at 0x7f1a2f159e50>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

test_folder = 'aln_interleaved'

    def test_quick_analysis(test_folder):
        full_path = os.path.join(HERE, test_folder)
>       main.call_main("DNA", '--no-ml-tree "%s" --force-restart' % full_path)

/home/lenny/partitionfinder/tests/quick_analysis/test_quick.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/analysis_method.py:47: in do_analysis
    res = self.analyse_scheme(s)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fced6d0>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  analysis:logtools.py:100 Deleting all previous workings in './analysis'
WARNING  subset_ops:logtools.py:100 These columns are missing from the block definitions: 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
______________________ test_quick_analysis[maclinebreaks] ______________________

self = 'alignment'
instring = "#NB Don't forget the semi-colons at the end of every statement!\r\r## ALIGNMENT FILE ##\r# the name of your phylip al...rs1 = (p1, p2, p3, p4, p5);\rs2 = (p1, p2) (p3, p4, p5);\rs3 = (p1, p2) (p3) (p4, p5);\rs4 = (p1, p5) (p3, p4) (p2);\r"
loc = 939, do_actions = True, callPreParse = False

    def _parseNoCache(
        self, instring, loc, do_actions=True, callPreParse=True
    ) -> tuple[int, ParseResults]:
        debugging = self.debug  # and do_actions)
        len_instring = len(instring)
    
        if debugging or self.failAction:
            # print("Match {} at loc {}({}, {})".format(self, loc, lineno(loc, instring), col(loc, instring)))
            try:
                if callPreParse and self.callPreparse:
                    pre_loc = self.preParse(instring, loc)
                else:
                    pre_loc = loc
                tokens_start = pre_loc
                if self.debugActions.debug_try:
                    self.debugActions.debug_try(instring, tokens_start, self, False)
                if self.mayIndexError or pre_loc >= len_instring:
                    try:
                        loc, tokens = self.parseImpl(instring, pre_loc, do_actions)
                    except IndexError:
                        raise ParseException(instring, len_instring, self.errmsg, self)
                else:
                    loc, tokens = self.parseImpl(instring, pre_loc, do_actions)
            except Exception as err:
                # print("Exception raised:", err)
                if self.debugActions.debug_fail:
                    self.debugActions.debug_fail(
                        instring, tokens_start, self, err, False
                    )
                if self.failAction:
                    self.failAction(instring, tokens_start, self, err)
                raise
        else:
            if callPreParse and self.callPreparse:
                pre_loc = self.preParse(instring, loc)
            else:
                pre_loc = loc
            tokens_start = pre_loc
            if self.mayIndexError or pre_loc >= len_instring:
                try:
>                   loc, tokens = self.parseImpl(instring, pre_loc, do_actions)

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:846: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 'alignment'
instring = "#NB Don't forget the semi-colons at the end of every statement!\r\r## ALIGNMENT FILE ##\r# the name of your phylip al...rs1 = (p1, p2, p3, p4, p5);\rs2 = (p1, p2) (p3, p4, p5);\rs3 = (p1, p2) (p3) (p4, p5);\rs4 = (p1, p5) (p3, p4) (p2);\r"
loc = 939, do_actions = True

    def parseImpl(self, instring, loc, do_actions=True) -> ParseImplReturnType:
        errmsg = self.errmsg or ""
        errloc = loc
        if self.caseless:
            if instring[loc : loc + self.matchLen].upper() == self.caselessmatch:
                if loc == 0 or instring[loc - 1].upper() not in self.identChars:
                    if (
                        loc >= len(instring) - self.matchLen
                        or instring[loc + self.matchLen].upper() not in self.identChars
                    ):
                        return loc + self.matchLen, self.match
    
                    # followed by keyword char
                    errmsg += ", was immediately followed by keyword character"
                    errloc = loc + self.matchLen
                else:
                    # preceded by keyword char
                    errmsg += ", keyword was immediately preceded by keyword character"
                    errloc = loc - 1
            # else no match just raise plain exception
    
        elif (
>           instring[loc] == self.firstMatchChar
            and self.matchLen == 1
            or instring.startswith(self.match, loc)
        ):
E       IndexError: string index out of range

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:2582: IndexError

During handling of the above exception, another exception occurred:

self = <partfinder.parser.Parser object at 0x7f1a2f15a600>
s = "#NB Don't forget the semi-colons at the end of every statement!\r\r## ALIGNMENT FILE ##\r# the name of your phylip al...rs1 = (p1, p2, p3, p4, p5);\rs2 = (p1, p2) (p3, p4, p5);\rs3 = (p1, p2) (p3) (p4, p5);\rs4 = (p1, p5) (p3, p4) (p2);\r"

    def parse_configuration(self, s):
        """Parse a string as a configuration settings file"""
        try:
            self.result = self.config_parser.ignore(pythonStyleComment).\
>               parseString(s)

/home/lenny/partitionfinder/partfinder/parser.py:265: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {{'alignment' Suppress:('=') W:(-.0-9A-Z_a-z) Suppress:(';')} ['user_tree_topology' Suppress:('=') W:(-.0-9A-Z_a-z) Su...({Group:({Suppress:('(') W:(-0-9A-Z_a-z) [, W:(-0-9A-Z_a-z)]... Suppress:(')')})}...) Suppress:(';')})}...] string_end}
instring = "#NB Don't forget the semi-colons at the end of every statement!\r\r## ALIGNMENT FILE ##\r# the name of your phylip al...rs1 = (p1, p2, p3, p4, p5);\rs2 = (p1, p2) (p3, p4, p5);\rs3 = (p1, p2) (p3) (p4, p5);\rs4 = (p1, p5) (p3, p4) (p2);\r"
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: Expected Keyword 'alignment', found end of text  (at char 939), (line:1, col:940)

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

test_folder = 'maclinebreaks'

    def test_quick_analysis(test_folder):
        full_path = os.path.join(HERE, test_folder)
>       main.call_main("DNA", '--no-ml-tree "%s" --force-restart' % full_path)

/home/lenny/partitionfinder/tests/quick_analysis/test_quick.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:376: in main
    cfg.load_base_path(args[0])
/home/lenny/partitionfinder/partfinder/config.py:290: in load_base_path
    self.load(config_path)
/home/lenny/partitionfinder/partfinder/config.py:322: in load
    p.parse_file(config_path)
/home/lenny/partitionfinder/partfinder/parser.py:259: in parse_file
    self.parse_configuration(s)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.parser.Parser object at 0x7f1a2f15a600>
s = "#NB Don't forget the semi-colons at the end of every statement!\r\r## ALIGNMENT FILE ##\r# the name of your phylip al...rs1 = (p1, p2, p3, p4, p5);\rs2 = (p1, p2) (p3, p4, p5);\rs3 = (p1, p2) (p3) (p4, p5);\rs4 = (p1, p5) (p3, p4) (p2);\r"

    def parse_configuration(self, s):
        """Parse a string as a configuration settings file"""
        try:
            self.result = self.config_parser.ignore(pythonStyleComment).\
                parseString(s)
    
        except ParserError as p:
            log.error(p.format_message())
            raise PartitionFinderError
    
        except ParseException as p:
            log.error("""There was a problem loading your .cfg file, please
                      check and try again""")
            log.error(str(p))
    
            # Let's see if there was something missing from the input file
            expectations = ["models", "search", "[schemes]", "[data_blocks]",
                            "model_selection", "branchlengths", "alignment"]
            missing = None
            for e in expectations:
                if p.msg.count(e):
                    missing = e
    
            if missing:
                log.info(
                    """It looks like the '%s' option might be missing or in the
                    wrong place. Or perhaps something is wrong in the lines just
                    before the '%s' option is missing. Please double check the
                    configuration file and try again""" % (missing, missing))
            else:
                log.info(
                    """The line causing the problem is this: '%s'. Please
                    check that line, and make sure it appears in the right
                    place in the config file. If it looks OK, try
                    double-checking the semi-colons on other lines""" % p.line)
>           raise PartitionFinderError
E           partfinder.util.PartitionFinderError

/home/lenny/partitionfinder/partfinder/parser.py:296: PartitionFinderError
------------------------------ Captured log call -------------------------------
ERROR    parser:logtools.py:100 There was a problem loading your .cfg file, please check and try again
ERROR    parser:logtools.py:100 Expected Keyword 'alignment', found end of text (at char 939), (line:1, col:940)
ERROR    main:logtools.py:100 Failed to run. See previous errors.
____________________ test_quick_analysis[windowslinebreaks] ____________________

self = <partfinder.phyml.Parser object at 0x7f1a2fcf24b0>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

test_folder = 'windowslinebreaks'

    def test_quick_analysis(test_folder):
        full_path = os.path.join(HERE, test_folder)
>       main.call_main("DNA", '--no-ml-tree "%s" --force-restart' % full_path)

/home/lenny/partitionfinder/tests/quick_analysis/test_quick.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/analysis_method.py:47: in do_analysis
    res = self.analyse_scheme(s)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fa94c20>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  analysis:logtools.py:100 Deleting all previous workings in './analysis'
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
_________________________ test_quick_analysis[aln_RY] __________________________

self = <partfinder.phyml.Parser object at 0x7f1a2f1c7f20>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

test_folder = 'aln_RY'

    def test_quick_analysis(test_folder):
        full_path = os.path.join(HERE, test_folder)
>       main.call_main("DNA", '--no-ml-tree "%s" --force-restart' % full_path)

/home/lenny/partitionfinder/tests/quick_analysis/test_quick.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/analysis_method.py:47: in do_analysis
    res = self.analyse_scheme(s)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fa96720>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  analysis:logtools.py:100 Deleting all previous workings in './analysis'
WARNING  subset_ops:logtools.py:100 These columns are missing from the block definitions: 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
_________________________ test_quick_analysis[greedy] __________________________

self = <partfinder.phyml.Parser object at 0x7f1a2fcd5070>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

test_folder = 'greedy'

    def test_quick_analysis(test_folder):
        full_path = os.path.join(HERE, test_folder)
>       main.call_main("DNA", '--no-ml-tree "%s" --force-restart' % full_path)

/home/lenny/partitionfinder/tests/quick_analysis/test_quick.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/logtools.py:159: in indented_fn
    fn(*args, **kwargs)
/home/lenny/partitionfinder/partfinder/analysis_method.py:161: in do_analysis
    start_result = self.analyse_scheme(start_scheme)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fcec560>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  analysis:logtools.py:100 Deleting all previous workings in './analysis'
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
ERROR    phyml:logtools.py:100       BIG MOMMA SAYS: <class 'bytes'>
__________________________ test_quick_analysis[user] ___________________________

self = <partfinder.phyml.Parser object at 0x7f1a2fcbc770>
text = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'

    def parse(self, text):
        log.debug("Parsing phyml output...")
        try:
>           tokens = self.root_parser.parseString(text)

/home/lenny/partitionfinder/partfinder/phyml.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/util.py:377: in _inner
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = {Suppress:(SkipTo:('Log-likelihood:')) 'Log-likelihood:' W:(-.0-9) Suppress:(SkipTo:('Tree size:')) 'Tree size:' W:(-.0-9) Suppress:(SkipTo:('Time used:')) 'Time used:' W:(0-9hms) Suppress:('(') W:(-0-9) Suppress:('seconds') Suppress:(')')}
instring = b'\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n               ...3. 52(5):696-704.\n oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n'
parse_all = False

    def parse_string(
        self, instring: str, parse_all: bool = False, *, parseAll: bool = False
    ) -> ParseResults:
        """
        Parse a string with respect to the parser definition. This function is intended as the primary interface to the
        client code.
    
        :param instring: The input string to be parsed.
        :param parse_all: If set, the entire input string must match the grammar.
        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.
        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.
        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or
          an object with attributes if the given parser includes results names.
    
        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This
        is also equivalent to ending the grammar with :class:`StringEnd`\\ ().
    
        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are
        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string
        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string
        being parsed, one can ensure a consistent view of the input string by doing one of the following:
    
        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),
        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the
          parse action's ``s`` argument, or
        - explicitly expand the tabs in your input string before calling ``parse_string``.
    
        Examples:
    
        By default, partial matches are OK.
    
        >>> res = Word('a').parse_string('aaaaabaaa')
        >>> print(res)
        ['aaaaa']
    
        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children
        directly to see more examples.
    
        It raises an exception if parse_all flag is set and instring does not match the whole grammar.
    
        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)
        Traceback (most recent call last):
        ...
        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)
        """
        parseAll = parse_all or parseAll
    
        ParserElement.reset_cache()
        if not self.streamlined:
            self.streamline()
        for e in self.ignoreExprs:
            e.streamline()
        if not self.keepTabs:
            instring = instring.expandtabs()
        try:
            loc, tokens = self._parse(instring, 0)
            if parseAll:
                loc = self.preParse(instring, loc)
                se = Empty() + StringEnd().set_debug(False)
                se._parse(instring, loc)
        except _ParseActionIndexError as pa_exc:
            raise pa_exc.exc
        except ParseBaseException as exc:
            if ParserElement.verbose_stacktrace:
                raise
    
            # catch and re-raise exception from here, clearing out pyparsing internal stack trace
>           raise exc.with_traceback(None)
E           pyparsing.exceptions.ParseException: <exception str() failed>

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/core.py:1212: ParseException

During handling of the above exception, another exception occurred:

test_folder = 'user'

    def test_quick_analysis(test_folder):
        full_path = os.path.join(HERE, test_folder)
>       main.call_main("DNA", '--no-ml-tree "%s" --force-restart' % full_path)

/home/lenny/partitionfinder/tests/quick_analysis/test_quick.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/main.py:430: in call_main
    main("<main.py:call_main(%s)>" % datatype, datatype, cmdargs)
/home/lenny/partitionfinder/partfinder/main.py:388: in main
    run_analysis(cfg, options)
/home/lenny/partitionfinder/partfinder/main.py:322: in run_analysis
    results = anal.analyse()
/home/lenny/partitionfinder/partfinder/analysis.py:93: in analyse
    self.do_analysis()
/home/lenny/partitionfinder/partfinder/analysis_method.py:47: in do_analysis
    res = self.analyse_scheme(s)
/home/lenny/partitionfinder/partfinder/analysis.py:322: in analyse_scheme
    self.analyse_list_of_subsets(not_done)
/home/lenny/partitionfinder/partfinder/analysis.py:300: in analyse_list_of_subsets
    self.run_threaded(tasks)
/home/lenny/partitionfinder/partfinder/analysis.py:265: in run_threaded
    pool.join()
/home/lenny/partitionfinder/partfinder/threadpool.py:105: in join
    raise self.exception
/home/lenny/partitionfinder/partfinder/threadpool.py:120: in run
    cmd(*args)
/home/lenny/partitionfinder/partfinder/analysis.py:245: in run_task
    sub.parse_model_result(the_config, model_name)
/home/lenny/partitionfinder/partfinder/subset.py:294: in parse_model_result
    result = cfg.processor.parse(output, cfg)
/home/lenny/partitionfinder/partfinder/phyml.py:225: in parse
    return the_parser.parse(text)
/home/lenny/partitionfinder/partfinder/phyml.py:208: in parse
    log.error(str(p))
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:199: in __str__
    return self.formatted_message()
/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:195: in formatted_message
    found_phrase = f", found {self.found}" if self.found else ""
/usr/lib/python3.12/functools.py:995: in __get__
    val = self.func(instance)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError('cannot use a string pattern on a bytes-like object') raised in repr()] ParseException object at 0x7f1a2fcef380>

    @cached_property
    def found(self) -> str:
        if not self.pstr:
            return ""
    
        if self.loc >= len(self.pstr):
            return "end of text"
    
        # pull out next word at error location
>       found_match = _exception_word_extractor.match(self.pstr, self.loc)
E       TypeError: cannot use a string pattern on a bytes-like object

/home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/pyparsing/exceptions.py:174: TypeError
------------------------------ Captured log call -------------------------------
WARNING  analysis:logtools.py:100 Deleting all previous workings in './analysis'
ERROR    phyml:logtools.py:100 BIG MOMMA SAYS: <class 'bytes'>
____________________________ test_parse_nucleotide _____________________________

    def test_parse_nucleotide():
        pth = os.path.join(MISC_PATH, 'raxml_nucleotide.output')
>       c = Configuration().init(datatype='DNA', phylogeny_program="raxml")

/home/lenny/partitionfinder/tests/test_raxml.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2f1cbbc0>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
_____________________________ test_parse_aminoacid _____________________________

    def test_parse_aminoacid():
        pth = os.path.join(MISC_PATH, 'raxml_aminoacid.output')
>       c = Configuration().init(datatype='protein', phylogeny_program="raxml")

/home/lenny/partitionfinder/tests/test_raxml.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2f194530>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
_______________________________ test_parse_lg4m ________________________________

    def test_parse_lg4m():
        pth = os.path.join(MISC_PATH, 'raxml_aminoacid_LG4M+G.output')
>       c = Configuration().init(datatype='protein', phylogeny_program="raxml")

/home/lenny/partitionfinder/tests/test_raxml.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/lenny/partitionfinder/partfinder/config.py:106: in init
    self.data_layout = self.processor.make_data_layout(self)
/home/lenny/partitionfinder/partfinder/raxml.py:65: in make_data_layout
    return DataLayout(letters)
/home/lenny/partitionfinder/partfinder/database.py:54: in __init__
    self.data_type = self.make_datatype()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <partfinder.database.DataLayout object at 0x7f1a2f1c8860>

    def make_datatype(self):
        # 32 is the md5 length
        subset_id_length = 32
        model_id_length = _model_string_maxlen()
    
        layout = [
            ('subset_id', 'S{}'.format(subset_id_length)),
            ('model_id', 'S{}'.format(model_id_length)),
            ('seconds', int_type),
            ('params', int_type),
        ]
    
        # Now add the floating point fields
        flds = "lnl alpha aic aicc bic site_rate".split()
        for f in flds:
            layout.append((f, float_type))
    
        # Now add frequencies and rate. These are added as embedded in an extra dimension
    
        layout.extend([
            ('freqs', float_type, self.letter_size),
            ('rates', float_type, self.rate_size),
        ])
    
        # Now construct the numpy datatype that gives us the layout
>       return numpy.dtype(layout)
E       ValueError: invalid shape in fixed-type tuple.

/home/lenny/partitionfinder/partfinder/database.py:100: ValueError
=============================== warnings summary ===============================
partfinder/alignment.py:135: 5 warnings
tests/PF2/test_pf2.py: 8 warnings
tests/christof/test_christof.py: 24 warnings
tests/full_analysis/test_full.py: 388 warnings
tests/quick_analysis/test_quick.py: 265 warnings
tests/test_alignment.py: 189 warnings
  /home/lenny/partitionfinder/partfinder/alignment.py:135: DeprecationWarning: The binary mode of fromstring is deprecated, as it behaves surprisingly on unicode inputs. Use frombuffer instead
    return np.fromstring(upper_bases, dtype='u1')

tests/christof/test_christof.py::test_greedy_phyml_dna
  /home/lenny/partitionfinder/.venv/lib/python3.12/site-packages/_pytest/threadexception.py:82: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-19
  
  Traceback (most recent call last):
    File "/usr/lib/python3.12/threading.py", line 1073, in _bootstrap_inner
      self.run()
    File "/home/lenny/partitionfinder/partfinder/threadpool.py", line 115, in run
      cmd, args = self.pool.next_task()
                  ^^^^^^^^^^^^^^^^^^^^^
    File "/home/lenny/partitionfinder/partfinder/threadpool.py", line 81, in next_task
      task = self.tasks[self.curtask]
             ~~~~~~~~~~^^^^^^^^^^^^^^
  IndexError: list index out of range
  
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/PF2/test_pf2.py::test_missing_sites_warning - TypeError: cannot ...
FAILED tests/all_succeed/test_all_success.py::test_1subset - ValueError: inva...
FAILED tests/christof/test_christof.py::test_greedy_phyml_dna - TypeError: ca...
FAILED tests/christof/test_christof.py::test_greedy_raxml_dna - ValueError: i...
FAILED tests/christof/test_christof.py::test_greedy_phyml_protein - TypeError...
FAILED tests/christof/test_christof.py::test_greedy_raxml_protein - ValueErro...
FAILED tests/christof/test_christof.py::test_clustering_raxml_dna - ValueErro...
FAILED tests/clustering/test_clustering.py::test_clustering[DNA_hcluster1] - ...
FAILED tests/clustering/test_clustering.py::test_clustering[DNA_hcluster2] - ...
FAILED tests/clustering/test_clustering.py::test_clustering[DNA_hcluster3] - ...
FAILED tests/clustering/test_clustering.py::test_clustering[DNA_hcluster4] - ...
FAILED tests/clustering/test_clustering.py::test_clustering[DNA_hcluster5] - ...
FAILED tests/clustering/test_clustering.py::test_clustering[DNA_hcluster6] - ...
FAILED tests/clustering/test_clustering.py::test_clustering[DNA_hcluster7] - ...
FAILED tests/clustering/test_clustering.py::test_clustering[DNA_rcluster1] - ...
FAILED tests/clustering/test_clustering.py::test_clustering[DNA_rcluster10]
FAILED tests/clustering/test_clustering.py::test_clustering[DNA_rcluster11]
FAILED tests/clustering/test_clustering.py::test_clustering[DNA_rcluster12]
FAILED tests/clustering/test_clustering.py::test_clustering[DNA_rcluster13]
FAILED tests/clustering/test_clustering.py::test_clustering[DNA_rcluster14]
FAILED tests/clustering/test_clustering.py::test_clustering[DNA_rcluster2] - ...
FAILED tests/clustering/test_clustering.py::test_clustering[DNA_rcluster3] - ...
FAILED tests/clustering/test_clustering.py::test_clustering[DNA_rcluster4] - ...
FAILED tests/clustering/test_clustering.py::test_clustering[DNA_rcluster5] - ...
FAILED tests/clustering/test_clustering.py::test_clustering[DNA_rcluster6] - ...
FAILED tests/clustering/test_clustering.py::test_clustering[DNA_rcluster7] - ...
FAILED tests/clustering/test_clustering.py::test_clustering[DNA_rcluster8] - ...
FAILED tests/clustering/test_clustering.py::test_clustering[DNA_rcluster9] - ...
FAILED tests/clustering/test_clustering.py::test_clustering[prot_hcluster1]
FAILED tests/clustering/test_clustering.py::test_clustering[prot_hcluster2]
FAILED tests/clustering/test_clustering.py::test_clustering[prot_hcluster3]
FAILED tests/clustering/test_clustering.py::test_clustering[prot_rcluster1]
FAILED tests/clustering/test_clustering.py::test_clustering[prot_rcluster2]
FAILED tests/clustering/test_clustering.py::test_clustering[prot_rcluster3]
FAILED tests/clustering/test_clustering.py::test_clustering[prot_rcluster4]
FAILED tests/clustering/test_clustering.py::test_clustering[prot_rcluster5]
FAILED tests/full_analysis/test_full.py::test_dna[DNA1] - TypeError: cannot u...
FAILED tests/full_analysis/test_full.py::test_dna[DNA2] - TypeError: cannot u...
FAILED tests/full_analysis/test_full.py::test_dna[DNA3] - TypeError: cannot u...
FAILED tests/full_analysis/test_full.py::test_dna[DNA4] - TypeError: cannot u...
FAILED tests/full_analysis/test_full.py::test_dna[DNA5] - TypeError: cannot u...
FAILED tests/full_analysis/test_full.py::test_dna[DNA6] - TypeError: cannot u...
FAILED tests/full_analysis/test_full.py::test_dna[DNA7] - TypeError: cannot u...
FAILED tests/full_analysis/test_full.py::test_dna[DNA8] - TypeError: cannot u...
FAILED tests/full_analysis/test_full.py::test_prot[prot1] - TypeError: cannot...
FAILED tests/full_analysis/test_full.py::test_prot[prot2] - TypeError: cannot...
FAILED tests/full_analysis/test_full.py::test_prot[prot3] - TypeError: cannot...
FAILED tests/full_analysis/test_full.py::test_prot[prot4] - TypeError: cannot...
FAILED tests/full_analysis/test_full.py::test_prot[prot5] - TypeError: cannot...
FAILED tests/full_analysis/test_full.py::test_prot[prot6] - TypeError: cannot...
FAILED tests/full_analysis/test_full.py::test_prot[prot7] - TypeError: cannot...
FAILED tests/full_analysis/test_full.py::test_prot[prot8] - TypeError: cannot...
FAILED tests/full_analysis/test_full.py::test_rerun_success[rerun01] - TypeEr...
FAILED tests/full_analysis/test_full.py::test_rerun_success[rerun02] - TypeEr...
FAILED tests/full_analysis/test_full.py::test_rerun_success[rerun03] - TypeEr...
FAILED tests/full_analysis/test_full.py::test_rerun_success[rerun04] - TypeEr...
FAILED tests/full_analysis/test_full.py::test_rerun_success[rerun05] - TypeEr...
FAILED tests/full_analysis/test_full.py::test_rerun_success[rerun06] - TypeEr...
FAILED tests/full_analysis/test_full.py::test_rerun_success[rerun07] - TypeEr...
FAILED tests/full_analysis/test_full.py::test_rerun_success[rerun08] - TypeEr...
FAILED tests/kmeans/test_kmeans.py::test_grand - ValueError: invalid shape in...
FAILED tests/kmeans_ml_tree/test_ml_tree.py::test_DNA_entropy - ValueError: i...
FAILED tests/kmeans_ml_tree/test_ml_tree.py::test_DNA_tiger - ValueError: inv...
FAILED tests/kmeans_ml_tree/test_ml_tree.py::test_morph_entropy - ValueError:...
FAILED tests/kmeans_ml_tree/test_ml_tree.py::test_morph_tiger - ValueError: i...
FAILED tests/morphology/test_AIC.py::test_aic - ValueError: invalid shape in ...
FAILED tests/morphology/test_aicc.py::test_aicc - ValueError: invalid shape i...
FAILED tests/morphology/test_bic.py::test_bic - ValueError: invalid shape in ...
FAILED tests/morphology/test_incorrectmat.py::test_incmat - ValueError: inval...
FAILED tests/morphology/test_modelBin.py::test_bin - ValueError: invalid shap...
FAILED tests/morphology/test_modelBinASC.py::test_binASC - ValueError: invali...
FAILED tests/morphology/test_modelBinMisSpec.py::test_bin - ValueError: inval...
FAILED tests/morphology/test_modelMulti.py::test_multi - ValueError: invalid ...
FAILED tests/morphology/test_modelMultiASC.py::test_multiASC - ValueError: in...
FAILED tests/morphology/test_modeloutput.py::test_model - ValueError: invalid...
FAILED tests/morphology/test_nsubs.py::test_nsets - ValueError: invalid shape...
FAILED tests/morphology/test_wrongmodel.py::test_mixed - ValueError: invalid ...
FAILED tests/morphology/tiger/test_parse_to_rates.py::test_set_parts - Assert...
FAILED tests/quick_analysis/test_quick.py::test_quick_analysis[all] - TypeErr...
FAILED tests/quick_analysis/test_quick.py::test_quick_analysis[user_tree] - T...
FAILED tests/quick_analysis/test_quick.py::test_quick_analysis[aln_interleaved]
FAILED tests/quick_analysis/test_quick.py::test_quick_analysis[maclinebreaks]
FAILED tests/quick_analysis/test_quick.py::test_quick_analysis[windowslinebreaks]
FAILED tests/quick_analysis/test_quick.py::test_quick_analysis[aln_RY] - Type...
FAILED tests/quick_analysis/test_quick.py::test_quick_analysis[greedy] - Type...
FAILED tests/quick_analysis/test_quick.py::test_quick_analysis[user] - TypeEr...
FAILED tests/test_raxml.py::test_parse_nucleotide - ValueError: invalid shape...
FAILED tests/test_raxml.py::test_parse_aminoacid - ValueError: invalid shape ...
FAILED tests/test_raxml.py::test_parse_lg4m - ValueError: invalid shape in fi...
================= 89 failed, 45 passed, 880 warnings in 22.41s =================
